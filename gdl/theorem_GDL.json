{
  "line_addition(AB,BC)": {
    "1": {
      "premise": "Collinear(ABC)",
      "conclusion": [
        "Equal(LengthOfLine(AC),Add(LengthOfLine(AB),LengthOfLine(BC)))"
      ]
    }
  },
  "midpoint_of_line_judgment(M,AB)": {
    "1": {
      "premise": "Collinear(AMB)&Equal(LengthOfLine(AM),LengthOfLine(MB))",
      "conclusion": [
        "IsMidpointOfLine(M,AB)"
      ]
    }
  },
  "parallel_judgment_corresponding_angle(AB,CD,E)": {
    "1": {
      "premise": "Angle(EAB)&Angle(ACD)&Collinear(EAC)&Equal(MeasureOfAngle(EAB),MeasureOfAngle(ACD))",
      "conclusion": [
        "ParallelBetweenLine(AB,CD)"
      ]
    },
    "2": {
      "premise": "Angle(BAC)&Angle(DCE)&Collinear(ACE)&Equal(MeasureOfAngle(BAC),MeasureOfAngle(DCE))",
      "conclusion": [
        "ParallelBetweenLine(AB,CD)"
      ]
    }
  },
  "parallel_judgment_alternate_interior_angle(AB,CD)": {
    "1": {
      "premise": "Angle(BAD)&Angle(CDA)&Equal(MeasureOfAngle(BAD),MeasureOfAngle(CDA))",
      "conclusion": [
        "ParallelBetweenLine(AB,CD)"
      ]
    },
    "2": {
      "premise": "Angle(CBA)&Angle(BCD)&Equal(MeasureOfAngle(CBA),MeasureOfAngle(BCD))",
      "conclusion": [
        "ParallelBetweenLine(AB,CD)"
      ]
    }
  },
  "parallel_judgment_ipsilateral_internal_angle(AB,CD)": {
    "1": {
      "premise": "Angle(BAC)&Angle(ACD)&Equal(Add(MeasureOfAngle(BAC),MeasureOfAngle(ACD)),180)",
      "conclusion": [
        "ParallelBetweenLine(AB,CD)"
      ]
    }
  },
  "parallel_judgment_par_par(AB,CD,EF)": {
    "1": {
      "premise": "ParallelBetweenLine(AB,CD)&ParallelBetweenLine(CD,EF)",
      "conclusion": [
        "ParallelBetweenLine(AB,EF)"
      ]
    }
  },
  "parallel_judgment_per_per(AB,CD)": {
    "1": {
      "premise": "PerpendicularBetweenLine(BA,CA)&PerpendicularBetweenLine(AC,DC)",
      "conclusion": [
        "ParallelBetweenLine(AB,CD)"
      ]
    },
    "2": {
      "premise": "PerpendicularBetweenLine(CD,AD)&PerpendicularBetweenLine(BA,DA)",
      "conclusion": [
        "ParallelBetweenLine(AB,CD)"
      ]
    }
  },
  "parallel_property_collinear_extend(AB,CD,M)": {
    "1": {
      "premise": "ParallelBetweenLine(AB,CD)&Collinear(MAB)",
      "conclusion": [
        "ParallelBetweenLine(MA,CD)",
        "ParallelBetweenLine(MB,CD)"
      ]
    },
    "2": {
      "premise": "ParallelBetweenLine(AB,CD)&Collinear(ABM)",
      "conclusion": [
        "ParallelBetweenLine(AM,CD)",
        "ParallelBetweenLine(BM,CD)"
      ]
    },
    "3": {
      "premise": "ParallelBetweenLine(AB,CD)&Collinear(AMB)",
      "conclusion": [
        "ParallelBetweenLine(AM,CD)",
        "ParallelBetweenLine(MB,CD)"
      ]
    }
  },
  "parallel_property_corresponding_angle(AB,CD,E)": {
    "1": {
      "premise": "ParallelBetweenLine(AB,CD)&Collinear(EAC)",
      "conclusion": [
        "Equal(MeasureOfAngle(EAB),MeasureOfAngle(ACD))"
      ]
    },
    "2": {
      "premise": "ParallelBetweenLine(AB,CD)&Collinear(ACE)",
      "conclusion": [
        "Equal(MeasureOfAngle(BAC),MeasureOfAngle(DCE))"
      ]
    }
  },
  "parallel_property_alternate_interior_angle(AB,CD)": {
    "1": {
      "premise": "ParallelBetweenLine(AB,CD)&Line(AD)",
      "conclusion": [
        "Equal(MeasureOfAngle(BAD),MeasureOfAngle(CDA))"
      ]
    },
    "2": {
      "premise": "ParallelBetweenLine(AB,CD)&Line(BC)",
      "conclusion": [
        "Equal(MeasureOfAngle(CBA),MeasureOfAngle(BCD))"
      ]
    }
  },
  "parallel_property_ipsilateral_internal_angle(AB,CD)": {
    "1": {
      "premise": "ParallelBetweenLine(AB,CD)&Line(AC)",
      "conclusion": [
        "Equal(Add(MeasureOfAngle(BAC),MeasureOfAngle(ACD)),180)"
      ]
    }
  },
  "parallel_property_par_per(AB,CD)": {
    "1": {
      "premise": "ParallelBetweenLine(AB,CD)&PerpendicularBetweenLine(AC,DC)",
      "conclusion": [
        "PerpendicularBetweenLine(BA,CA)"
      ]
    },
    "2": {
      "premise": "ParallelBetweenLine(AB,CD)&PerpendicularBetweenLine(BA,CA)",
      "conclusion": [
        "PerpendicularBetweenLine(AC,DC)"
      ]
    }
  },
  "perpendicular_judgment_angle(AO,CO)": {
    "1": {
      "premise": "Angle(AOC)&Equal(MeasureOfAngle(AOC),90)",
      "conclusion": [
        "PerpendicularBetweenLine(AO,CO)"
      ]
    }
  },
  "perpendicular_bisector_judgment_per_and_mid(CO,AB)": {
    "1": {
      "premise": "Collinear(AOB)&Angle(AOC)&Equal(MeasureOfAngle(AOC),90)&Equal(LengthOfLine(AO),LengthOfLine(BO))",
      "conclusion": [
        "IsPerpendicularBisectorOfLine(CO,AB)"
      ]
    }
  },
  "perpendicular_bisector_judgment_distance_equal(CO,AB)": {
    "1": {
      "premise": "Collinear(AOB)&Angle(AOC)&Equal(MeasureOfAngle(AOC),90)&Equal(LengthOfLine(CA),LengthOfLine(CB))",
      "conclusion": [
        "IsPerpendicularBisectorOfLine(CO,AB)"
      ]
    }
  },
  "perpendicular_bisector_property_distance_equal(CO,AB)": {
    "1": {
      "premise": "IsPerpendicularBisectorOfLine(CO,AB)",
      "conclusion": [
        "Equal(LengthOfLine(CA),LengthOfLine(CB))"
      ]
    }
  },
  "perpendicular_bisector_property_bisector(CO,AB)": {
    "1": {
      "premise": "IsPerpendicularBisectorOfLine(CO,AB)&Angle(BCO)&Angle(OCA)",
      "conclusion": [
        "IsBisectorOfAngle(CO,BCA)"
      ]
    }
  },
  "angle_addition(ABC,CBD)": {
    "1": {
      "premise": "Angle(ABC)&Angle(CBD)&Angle(ABD)",
      "conclusion": [
        "Equal(MeasureOfAngle(ABD),Add(MeasureOfAngle(ABC),MeasureOfAngle(CBD)))"
      ]
    }
  },
  "flat_angle(ABC)": {
    "1": {
      "premise": "Collinear(ABC)",
      "conclusion": [
        "Equal(MeasureOfAngle(ABC),180)"
      ]
    }
  },
  "adjacent_complementary_angle(AOB,BOC)": {
    "1": {
      "premise": "Collinear(AOC)&Angle(AOB)&Angle(BOC)",
      "conclusion": [
        "Equal(Add(MeasureOfAngle(AOB),MeasureOfAngle(BOC)),180)"
      ]
    }
  },
  "round_angle(AOB,BOA)": {
    "1": {
      "premise": "Angle(AOB)&Angle(BOA)",
      "conclusion": [
        "Equal(Add(MeasureOfAngle(AOB),MeasureOfAngle(BOA)),360)"
      ]
    }
  },
  "vertical_angle(AOC,BOD)": {
    "1": {
      "premise": "Collinear(AOB)&Collinear(COD)&Angle(AOC)&Angle(BOD)",
      "conclusion": [
        "Equal(MeasureOfAngle(AOC),MeasureOfAngle(BOD))"
      ]
    }
  },
  "bisector_of_angle_judgment_angle_equal(BD,ABC)": {
    "1": {
      "premise": "Angle(ABD)&Angle(DBC)&Equal(MeasureOfAngle(ABD),MeasureOfAngle(DBC))",
      "conclusion": [
        "IsBisectorOfAngle(BD,ABC)"
      ]
    }
  },
  "bisector_of_angle_property_distance_equal(BD,ABC)": {
    "1": {
      "premise": "IsBisectorOfAngle(BD,ABC)&Equal(MeasureOfAngle(BCD),90)&Equal(MeasureOfAngle(DAB),90)",
      "conclusion": [
        "Equal(LengthOfLine(DA),LengthOfLine(DC))"
      ]
    }
  },
  "bisector_of_angle_property_line_ratio(BD,ABC)": {
    "1": {
      "premise": "IsBisectorOfAngle(BD,ABC)&Collinear(CDA)",
      "conclusion": [
        "Equal(Mul(LengthOfLine(CD),LengthOfLine(BA)),Mul(LengthOfLine(DA),LengthOfLine(BC)))"
      ]
    }
  },
  "bisector_of_angle_property_length_formula(BD,ABC)": {
    "1": {
      "premise": "IsBisectorOfAngle(BD,ABC)&Collinear(CDA)",
      "conclusion": [
        "Equal(Mul(LengthOfLine(BD),LengthOfLine(BD)),Sub(Mul(LengthOfLine(BC),LengthOfLine(BA)),Mul(LengthOfLine(DC),LengthOfLine(DA))))"
      ]
    }
  },
  "triangle_property_angle_sum(ABC)": {
    "1": {
      "premise": "Polygon(ABC)",
      "conclusion": [
        "Equal(Add(MeasureOfAngle(ABC),MeasureOfAngle(BCA),MeasureOfAngle(CAB)),180)"
      ]
    }
  },
  "sine_theorem(ABC)": {
    "1": {
      "premise": "Polygon(ABC)",
      "conclusion": [
        "Equal(Mul(LengthOfLine(AB),Sin(MeasureOfAngle(ABC))),Mul(LengthOfLine(AC),Sin(MeasureOfAngle(BCA))))"
      ]
    }
  },
  "cosine_theorem(ABC)": {
    "1": {
      "premise": "Polygon(ABC)",
      "conclusion": [
        "Equal(Add(Pow(LengthOfLine(BC),2),Mul(2,LengthOfLine(AB),LengthOfLine(AC),Cos(MeasureOfAngle(CAB)))),Add(Pow(LengthOfLine(AB),2),Pow(LengthOfLine(AC),2)))"
      ]
    }
  },
  "triangle_perimeter_formula(ABC)": {
    "1": {
      "premise": "Polygon(ABC)",
      "conclusion": [
        "Equal(PerimeterOfTriangle(ABC),Add(LengthOfLine(AB),LengthOfLine(BC),LengthOfLine(CA)))"
      ]
    }
  },
  "triangle_area_formula_common(ABC)": {
    "1": {
      "premise": "Polygon(ABC)",
      "conclusion": [
        "Equal(AreaOfTriangle(ABC),Mul(HeightOfTriangle(ABC),LengthOfLine(BC),1/2))"
      ]
    }
  },
  "triangle_area_formula_sine(ABC)": {
    "1": {
      "premise": "Polygon(ABC)",
      "conclusion": [
        "Equal(AreaOfTriangle(ABC),Mul(LengthOfLine(AB),LengthOfLine(AC),Sin(MeasureOfAngle(CAB)),1/2))"
      ]
    }
  },
  "median_of_triangle_judgment(AD,ABC)": {
    "1": {
      "premise": "Polygon(ABC)&Line(AD)&Collinear(BDC)&Equal(LengthOfLine(BD),LengthOfLine(CD))",
      "conclusion": [
        "IsMedianOfTriangle(AD,ABC)"
      ]
    }
  },
  "altitude_of_triangle_judgment(AD,ABC)": {
    "1": {
      "premise": "Polygon(ABC)&Line(AD)&Collinear(BDC)&Equal(MeasureOfAngle(BDA),90)",
      "conclusion": [
        "IsAltitudeOfTriangle(AD,ABC)"
      ]
    },
    "2": {
      "premise": "Polygon(ABC)&Line(AD)&Collinear(DBC)&Equal(MeasureOfAngle(ADB),90)",
      "conclusion": [
        "IsAltitudeOfTriangle(AD,ABC)"
      ]
    },
    "3": {
      "premise": "Polygon(ABC)&Line(AD)&Collinear(BCD)&Equal(MeasureOfAngle(CDA),90)",
      "conclusion": [
        "IsAltitudeOfTriangle(AD,ABC)"
      ]
    }
  },
  "midsegment_of_triangle_judgment_midpoint(DE,ABC)": {
    "1": {
      "premise": "Polygon(ABC)&Collinear(ADB)&Collinear(AEC)&Line(DE)&Equal(LengthOfLine(AD),LengthOfLine(BD))&Equal(LengthOfLine(AE),LengthOfLine(CE))",
      "conclusion": [
        "IsMidsegmentOfTriangle(DE,ABC)"
      ]
    }
  },
  "midsegment_of_triangle_judgment_parallel(DE,ABC)": {
    "1": {
      "premise": "Polygon(ABC)&Collinear(ADB)&Collinear(AEC)&Line(DE)&ParallelBetweenLine(DE,BC)&Equal(LengthOfLine(AD),LengthOfLine(BD))",
      "conclusion": [
        "IsMidsegmentOfTriangle(DE,ABC)"
      ]
    },
    "2": {
      "premise": "Polygon(ABC)&Collinear(ADB)&Collinear(AEC)&Line(DE)&ParallelBetweenLine(DE,BC)&Equal(LengthOfLine(AE),LengthOfLine(CE))",
      "conclusion": [
        "IsMidsegmentOfTriangle(DE,ABC)"
      ]
    },
    "3": {
      "premise": "Polygon(ABC)&Collinear(ADB)&Collinear(AEC)&Line(DE)&ParallelBetweenLine(DE,BC)&Equal(LengthOfLine(BC),Mul(LengthOfLine(DE),2))",
      "conclusion": [
        "IsMidsegmentOfTriangle(DE,ABC)"
      ]
    }
  },
  "midsegment_of_triangle_property_parallel(DE,ABC)": {
    "1": {
      "premise": "IsMidsegmentOfTriangle(DE,ABC)",
      "conclusion": [
        "ParallelBetweenLine(DE,BC)"
      ]
    }
  },
  "midsegment_of_triangle_property_length(DE,ABC)": {
    "1": {
      "premise": "IsMidsegmentOfTriangle(DE,ABC)",
      "conclusion": [
        "Equal(LengthOfLine(DE),Mul(LengthOfLine(BC),1/2))"
      ]
    }
  },
  "circumcenter_of_triangle_judgment_intersection(O,ABC,D,E)": {
    "1": {
      "premise": "Polygon(ABC)&Collinear(ADB)&Collinear(CEA)&IsPerpendicularBisectorOfLine(OD,AB)&IsPerpendicularBisectorOfLine(OE,CA)",
      "conclusion": [
        "IsCircumcenterOfTriangle(O,ABC)"
      ]
    }
  },
  "circumcenter_of_triangle_property_intersection(O,ABC,D)": {
    "1": {
      "premise": "IsCircumcenterOfTriangle(O,ABC)&Collinear(BDC)&Line(OD)&Equal(MeasureOfAngle(BDO),90)",
      "conclusion": [
        "IsPerpendicularBisectorOfLine(OD,BC)"
      ]
    },
    "2": {
      "premise": "IsCircumcenterOfTriangle(O,ABC)&Collinear(BDC)&Line(OD)&Equal(LengthOfLine(BD),LengthOfLine(CD))",
      "conclusion": [
        "IsPerpendicularBisectorOfLine(OD,BC)"
      ]
    }
  },
  "incenter_of_triangle_judgment_intersection(O,ABC)": {
    "1": {
      "premise": "Polygon(ABC)&IsBisectorOfAngle(BO,ABC)&IsBisectorOfAngle(CO,BCA)",
      "conclusion": [
        "IsIncenterOfTriangle(O,ABC)"
      ]
    }
  },
  "centroid_of_triangle_judgment_intersection(O,ABC,M,N)": {
    "1": {
      "premise": "IsMedianOfTriangle(CM,CAB)&IsMedianOfTriangle(BN,BCA)&Collinear(COM)&Collinear(BON)",
      "conclusion": [
        "IsCentroidOfTriangle(O,ABC)"
      ]
    }
  },
  "centroid_of_triangle_property_intersection(O,ABC,M)": {
    "1": {
      "premise": "IsCentroidOfTriangle(O,ABC)&Collinear(AOM)&Collinear(BMC)",
      "conclusion": [
        "IsMedianOfTriangle(AM,ABC)"
      ]
    }
  },
  "centroid_of_triangle_property_line_ratio(O,ABC,M)": {
    "1": {
      "premise": "IsCentroidOfTriangle(O,ABC)&Collinear(AOM)&Collinear(BMC)",
      "conclusion": [
        "Equal(LengthOfLine(OA),Mul(LengthOfLine(OM),2))"
      ]
    }
  },
  "orthocenter_of_triangle_judgment_intersection(O,ABC,D,E)": {
    "1": {
      "premise": "IsAltitudeOfTriangle(CD,CAB)&IsAltitudeOfTriangle(BE,BCA)&Collinear(COD)&Collinear(BOE)",
      "conclusion": [
        "IsOrthocenterOfTriangle(O,ABC)"
      ]
    }
  },
  "orthocenter_of_triangle_property_intersection(O,ABC,D)": {
    "1": {
      "premise": "IsOrthocenterOfTriangle(O,ABC)&Collinear(AOD)&Collinear(BDC)",
      "conclusion": [
        "IsAltitudeOfTriangle(AD,ABC)"
      ]
    }
  },
  "orthocenter_of_triangle_property_angle(O,ABC)": {
    "1": {
      "premise": "IsOrthocenterOfTriangle(O,ABC)&Angle(COB)",
      "conclusion": [
        "Equal(MeasureOfAngle(COB),Add(MeasureOfAngle(ABC),MeasureOfAngle(BCA)))"
      ]
    }
  },
  "congruent_triangle_judgment_sss(ABC,DEF)": {
    "1": {
      "premise": "Polygon(ABC)&Polygon(DEF)&Equal(LengthOfLine(AB),LengthOfLine(DE))&Equal(LengthOfLine(BC),LengthOfLine(EF))&Equal(LengthOfLine(CA),LengthOfLine(FD))",
      "conclusion": [
        "CongruentBetweenTriangle(ABC,DEF)"
      ]
    }
  },
  "congruent_triangle_judgment_sas(ABC,DEF)": {
    "1": {
      "premise": "Polygon(ABC)&Polygon(DEF)&Equal(LengthOfLine(AB),LengthOfLine(DE))&Equal(MeasureOfAngle(CAB),MeasureOfAngle(FDE))&Equal(LengthOfLine(AC),LengthOfLine(DF))",
      "conclusion": [
        "CongruentBetweenTriangle(ABC,DEF)"
      ]
    }
  },
  "congruent_triangle_judgment_aas(ABC,DEF)": {
    "1": {
      "premise": "Polygon(ABC)&Polygon(DEF)&Equal(MeasureOfAngle(ABC),MeasureOfAngle(DEF))&Equal(MeasureOfAngle(BCA),MeasureOfAngle(EFD))&Equal(LengthOfLine(AB),LengthOfLine(DE))",
      "conclusion": [
        "CongruentBetweenTriangle(ABC,DEF)"
      ]
    },
    "2": {
      "premise": "Polygon(ABC)&Polygon(DEF)&Equal(MeasureOfAngle(ABC),MeasureOfAngle(DEF))&Equal(MeasureOfAngle(BCA),MeasureOfAngle(EFD))&Equal(LengthOfLine(BC),LengthOfLine(EF))",
      "conclusion": [
        "CongruentBetweenTriangle(ABC,DEF)"
      ]
    },
    "3": {
      "premise": "Polygon(ABC)&Polygon(DEF)&Equal(MeasureOfAngle(ABC),MeasureOfAngle(DEF))&Equal(MeasureOfAngle(BCA),MeasureOfAngle(EFD))&Equal(LengthOfLine(AC),LengthOfLine(DF))",
      "conclusion": [
        "CongruentBetweenTriangle(ABC,DEF)"
      ]
    }
  },
  "congruent_triangle_judgment_hl(ABC,DEF)": {
    "1": {
      "premise": "Polygon(ABC)&Polygon(DEF)&Equal(MeasureOfAngle(ABC),90)&Equal(MeasureOfAngle(DEF),90)&Equal(LengthOfLine(AC),LengthOfLine(DF))&(Equal(LengthOfLine(AB),LengthOfLine(DE))|Equal(LengthOfLine(BC),LengthOfLine(EF)))",
      "conclusion": [
        "CongruentBetweenTriangle(ABC,DEF)"
      ]
    }
  },
  "congruent_triangle_property_line_equal(ABC,DEF)": {
    "1": {
      "premise": "CongruentBetweenTriangle(ABC,DEF)",
      "conclusion": [
        "Equal(LengthOfLine(BC),LengthOfLine(EF))"
      ]
    }
  },
  "congruent_triangle_property_angle_equal(ABC,DEF)": {
    "1": {
      "premise": "CongruentBetweenTriangle(ABC,DEF)",
      "conclusion": [
        "Equal(MeasureOfAngle(CAB),MeasureOfAngle(FDE))"
      ]
    }
  },
  "congruent_triangle_property_perimeter_equal(ABC,DEF)": {
    "1": {
      "premise": "CongruentBetweenTriangle(ABC,DEF)",
      "conclusion": [
        "Equal(PerimeterOfTriangle(ABC),PerimeterOfTriangle(DEF))"
      ]
    }
  },
  "congruent_triangle_property_area_equal(ABC,DEF)": {
    "1": {
      "premise": "CongruentBetweenTriangle(ABC,DEF)",
      "conclusion": [
        "Equal(AreaOfTriangle(ABC),AreaOfTriangle(DEF))"
      ]
    }
  },
  "congruent_triangle_property_exchange(ABC,DEF)": {
    "1": {
      "premise": "CongruentBetweenTriangle(ABC,DEF)",
      "conclusion": [
        "CongruentBetweenTriangle(DEF,ABC)"
      ]
    }
  },
  "mirror_congruent_triangle_judgment_sss(ABC,DEF)": {
    "1": {
      "premise": "Polygon(ABC)&Polygon(DEF)&Equal(LengthOfLine(AB),LengthOfLine(FD))&Equal(LengthOfLine(BC),LengthOfLine(EF))&Equal(LengthOfLine(CA),LengthOfLine(DE))",
      "conclusion": [
        "MirrorCongruentBetweenTriangle(ABC,DEF)"
      ]
    }
  },
  "mirror_congruent_triangle_judgment_sas(ABC,DEF)": {
    "1": {
      "premise": "Polygon(ABC)&Polygon(DEF)&Equal(LengthOfLine(AB),LengthOfLine(DF))&Equal(MeasureOfAngle(CAB),MeasureOfAngle(FDE))&Equal(LengthOfLine(AC),LengthOfLine(DE))",
      "conclusion": [
        "MirrorCongruentBetweenTriangle(ABC,DEF)"
      ]
    }
  },
  "mirror_congruent_triangle_judgment_aas(ABC,DEF)": {
    "1": {
      "premise": "Polygon(ABC)&Polygon(DEF)&Equal(MeasureOfAngle(ABC),MeasureOfAngle(EFD))&Equal(MeasureOfAngle(BCA),MeasureOfAngle(DEF))&Equal(LengthOfLine(AB),LengthOfLine(DF))",
      "conclusion": [
        "MirrorCongruentBetweenTriangle(ABC,DEF)"
      ]
    },
    "2": {
      "premise": "Polygon(ABC)&Polygon(DEF)&Equal(MeasureOfAngle(ABC),MeasureOfAngle(EFD))&Equal(MeasureOfAngle(BCA),MeasureOfAngle(DEF))&Equal(LengthOfLine(BC),LengthOfLine(EF))",
      "conclusion": [
        "MirrorCongruentBetweenTriangle(ABC,DEF)"
      ]
    },
    "3": {
      "premise": "Polygon(ABC)&Polygon(DEF)&Equal(MeasureOfAngle(ABC),MeasureOfAngle(EFD))&Equal(MeasureOfAngle(BCA),MeasureOfAngle(DEF))&Equal(LengthOfLine(CA),LengthOfLine(DE))",
      "conclusion": [
        "MirrorCongruentBetweenTriangle(ABC,DEF)"
      ]
    }
  },
  "mirror_congruent_triangle_judgment_hl(ABC,DEF)": {
    "1": {
      "premise": "Polygon(ABC)&Polygon(DEF)&Equal(MeasureOfAngle(ABC),90)&Equal(MeasureOfAngle(EFD),90)&Equal(LengthOfLine(AC),LengthOfLine(DE))&(Equal(LengthOfLine(BC),LengthOfLine(EF))|Equal(LengthOfLine(AB),LengthOfLine(DF)))",
      "conclusion": [
        "MirrorCongruentBetweenTriangle(ABC,DEF)"
      ]
    }
  },
  "mirror_congruent_triangle_property_line_equal(ABC,DEF)": {
    "1": {
      "premise": "MirrorCongruentBetweenTriangle(ABC,DEF)",
      "conclusion": [
        "Equal(LengthOfLine(BC),LengthOfLine(EF))"
      ]
    }
  },
  "mirror_congruent_triangle_property_angle_equal(ABC,DEF)": {
    "1": {
      "premise": "MirrorCongruentBetweenTriangle(ABC,DEF)",
      "conclusion": [
        "Equal(MeasureOfAngle(CAB),MeasureOfAngle(FDE))"
      ]
    }
  },
  "mirror_congruent_triangle_property_perimeter_equal(ABC,DEF)": {
    "1": {
      "premise": "MirrorCongruentBetweenTriangle(ABC,DEF)",
      "conclusion": [
        "Equal(PerimeterOfTriangle(ABC),PerimeterOfTriangle(DEF))"
      ]
    }
  },
  "mirror_congruent_triangle_property_area_equal(ABC,DEF)": {
    "1": {
      "premise": "MirrorCongruentBetweenTriangle(ABC,DEF)",
      "conclusion": [
        "Equal(AreaOfTriangle(ABC),AreaOfTriangle(DEF))"
      ]
    }
  },
  "mirror_congruent_triangle_property_exchange(ABC,DEF)": {
    "1": {
      "premise": "MirrorCongruentBetweenTriangle(ABC,DEF)",
      "conclusion": [
        "MirrorCongruentBetweenTriangle(DEF,ABC)"
      ]
    }
  },
  "similar_triangle_judgment_sss(ABC,DEF)": {
    "1": {
      "premise": "Polygon(ABC)&Polygon(DEF)&Equal(Mul(LengthOfLine(AB),LengthOfLine(EF)),Mul(LengthOfLine(DE),LengthOfLine(BC)))&Equal(Mul(LengthOfLine(AB),LengthOfLine(DF)),Mul(LengthOfLine(DE),LengthOfLine(CA)))",
      "conclusion": [
        "SimilarBetweenTriangle(ABC,DEF)"
      ]
    }
  },
  "similar_triangle_judgment_sas(ABC,DEF)": {
    "1": {
      "premise": "Polygon(ABC)&Polygon(DEF)&Equal(Mul(LengthOfLine(AB),LengthOfLine(DF)),Mul(LengthOfLine(DE),LengthOfLine(AC)))&Equal(MeasureOfAngle(CAB),MeasureOfAngle(FDE))",
      "conclusion": [
        "SimilarBetweenTriangle(ABC,DEF)"
      ]
    }
  },
  "similar_triangle_judgment_aa(ABC,DEF)": {
    "1": {
      "premise": "Polygon(ABC)&Polygon(DEF)&Equal(MeasureOfAngle(ABC),MeasureOfAngle(DEF))&Equal(MeasureOfAngle(BCA),MeasureOfAngle(EFD))",
      "conclusion": [
        "SimilarBetweenTriangle(ABC,DEF)"
      ]
    }
  },
  "similar_triangle_judgment_hl(ABC,DEF)": {
    "1": {
      "premise": "Polygon(ABC)&Polygon(DEF)&Equal(MeasureOfAngle(ABC),90)&Equal(MeasureOfAngle(DEF),90)&Equal(Mul(LengthOfLine(AB),LengthOfLine(DF)),Mul(LengthOfLine(AC),LengthOfLine(DE)))",
      "conclusion": [
        "SimilarBetweenTriangle(ABC,DEF)"
      ]
    },
    "2": {
      "premise": "Polygon(ABC)&Polygon(DEF)&PerpendicularBetweenLine(AB,CB)&PerpendicularBetweenLine(DE,FE)&Equal(Mul(LengthOfLine(BC),LengthOfLine(DF)),Mul(LengthOfLine(AC),LengthOfLine(EF)))",
      "conclusion": [
        "SimilarBetweenTriangle(ABC,DEF)"
      ]
    }
  },
  "similar_triangle_property_ratio(ABC,DEF)": {
    "1": {
      "premise": "SimilarBetweenTriangle(ABC,DEF)",
      "conclusion": [
        "SimilarBetweenTriangle(DEF,ABC)",
        "Equal(Mul(RatioOfSimilarTriangle(ABC,DEF),RatioOfSimilarTriangle(DEF,ABC)),1)"
      ]
    }
  },
  "similar_triangle_property_line_ratio(ABC,DEF)": {
    "1": {
      "premise": "SimilarBetweenTriangle(ABC,DEF)",
      "conclusion": [
        "Equal(LengthOfLine(BC),Mul(LengthOfLine(EF),RatioOfSimilarTriangle(ABC,DEF)))"
      ]
    }
  },
  "similar_triangle_property_angle_equal(ABC,DEF)": {
    "1": {
      "premise": "SimilarBetweenTriangle(ABC,DEF)",
      "conclusion": [
        "Equal(MeasureOfAngle(CAB),MeasureOfAngle(FDE))"
      ]
    }
  },
  "similar_triangle_property_perimeter_ratio(ABC,DEF)": {
    "1": {
      "premise": "SimilarBetweenTriangle(ABC,DEF)",
      "conclusion": [
        "Equal(PerimeterOfTriangle(ABC),Mul(PerimeterOfTriangle(DEF),RatioOfSimilarTriangle(ABC,DEF)))"
      ]
    }
  },
  "similar_triangle_property_area_square_ratio(ABC,DEF)": {
    "1": {
      "premise": "SimilarBetweenTriangle(ABC,DEF)",
      "conclusion": [
        "Equal(AreaOfTriangle(ABC),Mul(AreaOfTriangle(DEF),RatioOfSimilarTriangle(ABC,DEF),RatioOfSimilarTriangle(ABC,DEF)))"
      ]
    }
  },
  "mirror_similar_triangle_judgment_sss(ABC,DEF)": {
    "1": {
      "premise": "Polygon(ABC)&Polygon(DEF)&Equal(Mul(LengthOfLine(AB),LengthOfLine(EF)),Mul(LengthOfLine(FD),LengthOfLine(BC)))&Equal(Mul(LengthOfLine(AB),LengthOfLine(DE)),Mul(LengthOfLine(FD),LengthOfLine(CA)))",
      "conclusion": [
        "MirrorSimilarBetweenTriangle(ABC,DEF)"
      ]
    }
  },
  "mirror_similar_triangle_judgment_sas(ABC,DEF)": {
    "1": {
      "premise": "Polygon(ABC)&Polygon(DEF)&Equal(Mul(LengthOfLine(AB),LengthOfLine(DE)),Mul(LengthOfLine(DF),LengthOfLine(AC)))&Equal(MeasureOfAngle(CAB),MeasureOfAngle(FDE))",
      "conclusion": [
        "MirrorSimilarBetweenTriangle(ABC,DEF)"
      ]
    }
  },
  "mirror_similar_triangle_judgment_aa(ABC,DEF)": {
    "1": {
      "premise": "Polygon(ABC)&Polygon(DEF)&Equal(MeasureOfAngle(ABC),MeasureOfAngle(EFD))&Equal(MeasureOfAngle(BCA),MeasureOfAngle(DEF))",
      "conclusion": [
        "MirrorSimilarBetweenTriangle(ABC,DEF)"
      ]
    }
  },
  "mirror_similar_triangle_judgment_hl(ABC,DEF)": {
    "1": {
      "premise": "Polygon(BCA)&Polygon(DEF)&Equal(MeasureOfAngle(ABC),90)&Equal(MeasureOfAngle(DEF),90)&Equal(Mul(LengthOfLine(AB),LengthOfLine(DE)),Mul(LengthOfLine(DF),LengthOfLine(AC)))",
      "conclusion": [
        "MirrorSimilarBetweenTriangle(ABC,DEF)"
      ]
    },
    "2": {
      "premise": "Polygon(BCA)&Polygon(DEF)&Equal(MeasureOfAngle(ABC),90)&Equal(MeasureOfAngle(EFD),90)&Equal(Mul(LengthOfLine(BC),LengthOfLine(DE)),Mul(LengthOfLine(AC),LengthOfLine(EF)))",
      "conclusion": [
        "MirrorSimilarBetweenTriangle(ABC,DEF)"
      ]
    }
  },
  "mirror_similar_triangle_property_ratio(ABC,DEF)": {
    "1": {
      "premise": "MirrorSimilarBetweenTriangle(ABC,DEF)",
      "conclusion": [
        "MirrorSimilarBetweenTriangle(DEF,ABC)",
        "Equal(Mul(RatioOfMirrorSimilarTriangle(ABC,DEF),RatioOfMirrorSimilarTriangle(DEF,ABC)),1)"
      ]
    }
  },
  "mirror_similar_triangle_property_line_ratio(ABC,DEF)": {
    "1": {
      "premise": "MirrorSimilarBetweenTriangle(ABC,DEF)",
      "conclusion": [
        "Equal(LengthOfLine(BC),Mul(LengthOfLine(EF),RatioOfMirrorSimilarTriangle(ABC,DEF)))"
      ]
    }
  },
  "mirror_similar_triangle_property_angle_equal(ABC,DEF)": {
    "1": {
      "premise": "MirrorSimilarBetweenTriangle(ABC,DEF)",
      "conclusion": [
        "Equal(MeasureOfAngle(CAB),MeasureOfAngle(FDE))"
      ]
    }
  },
  "mirror_similar_triangle_property_perimeter_ratio(ABC,DEF)": {
    "1": {
      "premise": "MirrorSimilarBetweenTriangle(ABC,DEF)",
      "conclusion": [
        "Equal(PerimeterOfTriangle(ABC),Mul(PerimeterOfTriangle(DEF),RatioOfMirrorSimilarTriangle(ABC,DEF)))"
      ]
    }
  },
  "mirror_similar_triangle_property_area_square_ratio(ABC,DEF)": {
    "1": {
      "premise": "MirrorSimilarBetweenTriangle(ABC,DEF)",
      "conclusion": [
        "Equal(AreaOfTriangle(ABC),Mul(AreaOfTriangle(DEF),RatioOfMirrorSimilarTriangle(ABC,DEF),RatioOfMirrorSimilarTriangle(ABC,DEF)))"
      ]
    }
  },
  "right_triangle_judgment_angle(ABC)": {
    "1": {
      "premise": "Polygon(ABC)&Equal(MeasureOfAngle(ABC),90)",
      "conclusion": [
        "RightTriangle(ABC)"
      ]
    }
  },
  "right_triangle_judgment_pythagorean_inverse(ABC)": {
    "1": {
      "premise": "Polygon(ABC)&Equal(Add(Pow(LengthOfLine(AB),2),Pow(LengthOfLine(BC),2)),Pow(LengthOfLine(AC),2))",
      "conclusion": [
        "RightTriangle(ABC)"
      ]
    }
  },
  "right_triangle_property_pythagorean(ABC)": {
    "1": {
      "premise": "RightTriangle(ABC)",
      "conclusion": [
        "Equal(Add(Pow(LengthOfLine(AB),2),Pow(LengthOfLine(BC),2)),Pow(LengthOfLine(AC),2))"
      ]
    }
  },
  "right_triangle_property_length_of_median(ABC,M)": {
    "1": {
      "premise": "RightTriangle(ABC)&IsMedianOfTriangle(BM,BCA)",
      "conclusion": [
        "Equal(Mul(LengthOfLine(BM),2),LengthOfLine(CA))"
      ]
    }
  },
  "isosceles_triangle_judgment_line_equal(ABC)": {
    "1": {
      "premise": "Polygon(ABC)&Equal(LengthOfLine(AB),LengthOfLine(AC))",
      "conclusion": [
        "IsoscelesTriangle(ABC)"
      ]
    }
  },
  "isosceles_triangle_judgment_angle_equal(ABC)": {
    "1": {
      "premise": "Polygon(ABC)&Equal(MeasureOfAngle(ABC),MeasureOfAngle(BCA))",
      "conclusion": [
        "IsoscelesTriangle(ABC)"
      ]
    }
  },
  "isosceles_triangle_property_angle_equal(ABC)": {
    "1": {
      "premise": "IsoscelesTriangle(ABC)",
      "conclusion": [
        "Equal(MeasureOfAngle(ABC),MeasureOfAngle(BCA))"
      ]
    }
  },
  "isosceles_triangle_property_line_coincidence(ABC,M)": {
    "1": {
      "premise": "IsoscelesTriangle(ABC)&IsAltitudeOfTriangle(AM,ABC)",
      "conclusion": [
        "IsMedianOfTriangle(AM,ABC)",
        "IsBisectorOfAngle(AM,CAB)"
      ]
    },
    "2": {
      "premise": "IsoscelesTriangle(ABC)&IsMedianOfTriangle(AM,ABC)",
      "conclusion": [
        "IsAltitudeOfTriangle(AM,ABC)",
        "IsBisectorOfAngle(AM,CAB)"
      ]
    },
    "3": {
      "premise": "IsoscelesTriangle(ABC)&Collinear(BMC)&IsBisectorOfAngle(AM,CAB)",
      "conclusion": [
        "IsAltitudeOfTriangle(AM,ABC)",
        "IsMedianOfTriangle(AM,ABC)"
      ]
    }
  },
  "isosceles_right_triangle_judgment_isosceles_and_right(ABC)": {
    "1": {
      "premise": "IsoscelesTriangle(ABC)&RightTriangle(CAB)",
      "conclusion": [
        "IsoscelesRightTriangle(ABC)"
      ]
    }
  },
  "isosceles_right_triangle_property_angle(ABC)": {
    "1": {
      "premise": "IsoscelesRightTriangle(ABC)",
      "conclusion": [
        "Equal(MeasureOfAngle(ABC),45)",
        "Equal(MeasureOfAngle(BCA),45)"
      ]
    }
  },
  "equilateral_triangle_judgment_isosceles_and_isosceles(ABC)": {
    "1": {
      "premise": "IsoscelesTriangle(ABC)&IsoscelesTriangle(BCA)",
      "conclusion": [
        "EquilateralTriangle(ABC)"
      ]
    }
  },
  "equilateral_triangle_property_angle(ABC)": {
    "1": {
      "premise": "EquilateralTriangle(ABC)",
      "conclusion": [
        "Equal(MeasureOfAngle(CAB),60)"
      ]
    }
  },
  "quadrilateral_property_angle_sum(ABCD)": {
    "1": {
      "premise": "Polygon(ABCD)",
      "conclusion": [
        "Equal(Add(MeasureOfAngle(ABC),MeasureOfAngle(BCD),MeasureOfAngle(CDA),MeasureOfAngle(DAB)),360)"
      ]
    }
  },
  "quadrilateral_perimeter_formula(ABCD)": {
    "1": {
      "premise": "Polygon(ABCD)",
      "conclusion": [
        "Equal(Add(LengthOfLine(AB),LengthOfLine(BC),LengthOfLine(CD),LengthOfLine(DA)),PerimeterOfQuadrilateral(ABCD))"
      ]
    }
  },
  "altitude_of_quadrilateral_judgment(EF,ABCD)": {
    "1": {
      "premise": "(Parallelogram(ABCD)|Trapezoid(ABCD))&Line(EF)&Collinear(AED)&Collinear(BFC)&Equal(MeasureOfAngle(BFE),90)",
      "conclusion": [
        "IsAltitudeOfQuadrilateral(EF,ABCD)"
      ]
    },
    "2": {
      "premise": "(Parallelogram(ABCD)|Trapezoid(ABCD))&Line(EF)&Collinear(AED)&Collinear(FBC)&Equal(MeasureOfAngle(EFB),90)",
      "conclusion": [
        "IsAltitudeOfQuadrilateral(EF,ABCD)"
      ]
    },
    "3": {
      "premise": "(Parallelogram(ABCD)|Trapezoid(ABCD))&Line(EF)&Collinear(AED)&Collinear(BCF)&Equal(MeasureOfAngle(CFE),90)",
      "conclusion": [
        "IsAltitudeOfQuadrilateral(EF,ABCD)"
      ]
    }
  },
  "altitude_of_quadrilateral_judgment_left_vertex(AF,ABCD)": {
    "1": {
      "premise": "(Parallelogram(ABCD)|Trapezoid(ABCD))&Line(AF)&Collinear(BFC)&Equal(MeasureOfAngle(BFA),90)",
      "conclusion": [
        "IsAltitudeOfQuadrilateral(AF,ABCD)"
      ]
    },
    "2": {
      "premise": "(Parallelogram(ABCD)|Trapezoid(ABCD))&Line(AF)&Collinear(FBC)&Equal(MeasureOfAngle(AFB),90)",
      "conclusion": [
        "IsAltitudeOfQuadrilateral(AF,ABCD)"
      ]
    },
    "3": {
      "premise": "(Parallelogram(ABCD)|Trapezoid(ABCD))&Line(AF)&Collinear(BCF)&Equal(MeasureOfAngle(CFA),90)",
      "conclusion": [
        "IsAltitudeOfQuadrilateral(AF,ABCD)"
      ]
    }
  },
  "altitude_of_quadrilateral_judgment_right_vertex(DF,ABCD)": {
    "1": {
      "premise": "(Parallelogram(ABCD)|Trapezoid(ABCD))&Line(DF)&Collinear(BFC)&Equal(MeasureOfAngle(BFD),90)",
      "conclusion": [
        "IsAltitudeOfQuadrilateral(DF,ABCD)"
      ]
    },
    "2": {
      "premise": "(Parallelogram(ABCD)|Trapezoid(ABCD))&Line(DF)&Collinear(FBC)&Equal(MeasureOfAngle(DFB),90)",
      "conclusion": [
        "IsAltitudeOfQuadrilateral(DF,ABCD)"
      ]
    },
    "3": {
      "premise": "(Parallelogram(ABCD)|Trapezoid(ABCD))&Line(DF)&Collinear(BCF)&Equal(MeasureOfAngle(CFD),90)",
      "conclusion": [
        "IsAltitudeOfQuadrilateral(DF,ABCD)"
      ]
    }
  },
  "altitude_of_quadrilateral_judgment_diagonal(ABCD)": {
    "1": {
      "premise": "(Parallelogram(ABCD)|Trapezoid(ABCD))&Line(AC)&Equal(MeasureOfAngle(BCA),90)",
      "conclusion": [
        "IsAltitudeOfQuadrilateral(AC,ABCD)"
      ]
    },
    "2": {
      "premise": "(Parallelogram(ABCD)|Trapezoid(ABCD))&Line(DB)&Equal(MeasureOfAngle(DBC),90)",
      "conclusion": [
        "IsAltitudeOfQuadrilateral(DB,ABCD)"
      ]
    }
  },
  "midsegment_of_quadrilateral_judgment_midpoint(EF,ABCD)": {
    "1": {
      "premise": "Collinear(AEB)&Collinear(DFC)&Line(EF)&Equal(LengthOfLine(AE),LengthOfLine(BE))&Equal(LengthOfLine(DF),LengthOfLine(CF))",
      "conclusion": [
        "IsMidsegmentOfQuadrilateral(EF,ABCD)"
      ]
    }
  },
  "midsegment_of_quadrilateral_judgment_parallel(EF,ABCD)": {
    "1": {
      "premise": "Collinear(AEB)&Collinear(DFC)&Line(EF)&(Trapezoid(ABCD)|Parallelogram(ABCD))&ParallelBetweenLine(EF,BC)&Equal(LengthOfLine(AE),LengthOfLine(BE))",
      "conclusion": [
        "IsMidsegmentOfQuadrilateral(EF,ABCD)"
      ]
    },
    "2": {
      "premise": "Collinear(AEB)&Collinear(DFC)&Line(EF)&(Trapezoid(ABCD)|Parallelogram(ABCD))&ParallelBetweenLine(EF,BC)&Equal(LengthOfLine(DF),LengthOfLine(CF))",
      "conclusion": [
        "IsMidsegmentOfQuadrilateral(EF,ABCD)"
      ]
    },
    "3": {
      "premise": "Collinear(AEB)&Collinear(DFC)&Line(EF)&(Trapezoid(ABCD)|Parallelogram(ABCD))&ParallelBetweenLine(EF,BC)&Equal(Add(LengthOfLine(AD),LengthOfLine(BC)),Mul(LengthOfLine(EF),2))",
      "conclusion": [
        "IsMidsegmentOfQuadrilateral(EF,ABCD)"
      ]
    }
  },
  "midsegment_of_quadrilateral_property_length(EF,ABCD)": {
    "1": {
      "premise": "IsMidsegmentOfQuadrilateral(EF,ABCD)",
      "conclusion": [
        "Equal(Add(LengthOfLine(AD),LengthOfLine(BC)),Mul(LengthOfLine(EF),2))"
      ]
    }
  },
  "midsegment_of_quadrilateral_property_parallel(EF,ABCD)": {
    "1": {
      "premise": "IsMidsegmentOfQuadrilateral(EF,ABCD)&(Trapezoid(ABCD)|Parallelogram(ABCD))",
      "conclusion": [
        "ParallelBetweenLine(AD,EF)",
        "ParallelBetweenLine(EF,BC)"
      ]
    }
  },
  "circumcenter_of_quadrilateral_property_intersection(O,ABCD,E)": {
    "1": {
      "premise": "IsCircumcenterOfQuadrilateral(O,ABCD)&Collinear(BEC)&Equal(MeasureOfAngle(DEO),90)",
      "conclusion": [
        "IsPerpendicularBisectorOfLine(OE,BC)"
      ]
    },
    "2": {
      "premise": "IsCircumcenterOfQuadrilateral(O,ABCD)&Equal(LengthOfLine(BE),LengthOfLine(CE))",
      "conclusion": [
        "IsPerpendicularBisectorOfLine(OE,BC)"
      ]
    }
  },
  "congruent_quadrilateral_property_line_equal(ABCD,EFGH)": {
    "1": {
      "premise": "CongruentBetweenQuadrilateral(ABCD,EFGH)",
      "conclusion": [
        "Equal(LengthOfLine(AB),LengthOfLine(EF))"
      ]
    }
  },
  "congruent_quadrilateral_property_angle_equal(ABCD,EFGH)": {
    "1": {
      "premise": "CongruentBetweenQuadrilateral(ABCD,EFGH)",
      "conclusion": [
        "Equal(MeasureOfAngle(DAB),MeasureOfAngle(HEF))"
      ]
    }
  },
  "congruent_quadrilateral_property_perimeter_equal(ABCD,EFGH)": {
    "1": {
      "premise": "CongruentBetweenQuadrilateral(ABCD,EFGH)",
      "conclusion": [
        "Equal(PerimeterOfQuadrilateral(ABC),PerimeterOfQuadrilateral(DEF))"
      ]
    }
  },
  "congruent_quadrilateral_property_area_equal(ABCD,EFGH)": {
    "1": {
      "premise": "CongruentBetweenQuadrilateral(ABCD,EFGH)",
      "conclusion": [
        "Equal(AreaOfQuadrilateral(ABC),AreaOfQuadrilateral(DEF))"
      ]
    }
  },
  "congruent_quadrilateral_property_exchange(ABCD,EFGH)": {
    "1": {
      "premise": "CongruentBetweenQuadrilateral(ABCD,EFGH)",
      "conclusion": [
        "CongruentBetweenQuadrilateral(EFGH,ABCD)"
      ]
    }
  },
  "mirror_congruent_quadrilateral_property_line_equal(ABCD,EFGH)": {
    "1": {
      "premise": "MirrorCongruentBetweenQuadrilateral(ABCD,EFGH)",
      "conclusion": [
        "Equal(LengthOfLine(AB),LengthOfLine(EH))"
      ]
    }
  },
  "mirror_congruent_quadrilateral_property_angle_equal(ABCD,EFGH)": {
    "1": {
      "premise": "MirrorCongruentBetweenQuadrilateral(ABCD,EFGH)",
      "conclusion": [
        "Equal(MeasureOfAngle(DAB),MeasureOfAngle(HEF))"
      ]
    }
  },
  "mirror_congruent_quadrilateral_property_perimeter_equal(ABCD,EFGH)": {
    "1": {
      "premise": "MirrorCongruentBetweenQuadrilateral(ABCD,EFGH)",
      "conclusion": [
        "Equal(PerimeterOfQuadrilateral(ABCD),PerimeterOfQuadrilateral(EFGH))"
      ]
    }
  },
  "mirror_congruent_quadrilateral_property_area_equal(ABCD,EFGH)": {
    "1": {
      "premise": "MirrorCongruentBetweenQuadrilateral(ABCD,EFGH)",
      "conclusion": [
        "Equal(AreaOfQuadrilateral(ABCD),AreaOfQuadrilateral(EFGH))"
      ]
    }
  },
  "mirror_congruent_quadrilateral_property_exchange(ABCD,EFGHF)": {
    "1": {
      "premise": "MirrorCongruentBetweenQuadrilateral(ABCD,EFGH)",
      "conclusion": [
        "MirrorCongruentBetweenQuadrilateral(EFGH,ABCD)"
      ]
    }
  },
  "similar_quadrilateral_property_ratio(ABCD,EFGH)": {
    "1": {
      "premise": "SimilarBetweenQuadrilateral(ABCD,EFGH)",
      "conclusion": [
        "SimilarBetweenQuadrilateral(EFGH,ABCD)",
        "Equal(Mul(RatioOfSimilarQuadrilateral(ABCD,EFGH),RatioOfSimilarQuadrilateral(EFGH,ABCD)),1)"
      ]
    }
  },
  "similar_quadrilateral_property_line_ratio(ABCD,EFGH)": {
    "1": {
      "premise": "SimilarBetweenQuadrilateral(ABCD,EFGH)",
      "conclusion": [
        "Equal(LengthOfLine(AB),Mul(LengthOfLine(EF),RatioOfSimilarQuadrilateral(ABCD,EFGH)))"
      ]
    }
  },
  "similar_quadrilateral_property_angle_equal(ABCD,EFGH)": {
    "1": {
      "premise": "SimilarBetweenQuadrilateral(ABCD,EFGH)",
      "conclusion": [
        "Equal(MeasureOfAngle(DAB),MeasureOfAngle(HEF))"
      ]
    }
  },
  "similar_quadrilateral_property_perimeter_ratio(ABCD,EFGH)": {
    "1": {
      "premise": "SimilarBetweenQuadrilateral(ABCD,EFGH)",
      "conclusion": [
        "Equal(PerimeterOfQuadrilateral(ABCD),Mul(PerimeterOfQuadrilateral(EFGH),RatioOfSimilarQuadrilateral(ABCD,EFGH)))"
      ]
    }
  },
  "similar_quadrilateral_property_area_square_ratio(ABCD,EFGH)": {
    "1": {
      "premise": "SimilarBetweenQuadrilateral(ABCD,EFGH)",
      "conclusion": [
        "Equal(AreaOfQuadrilateral(ABCD),Mul(AreaOfQuadrilateral(EFGH),RatioOfSimilarQuadrilateral(ABCD,EFGH),RatioOfSimilarQuadrilateral(ABCD,EFGH)))"
      ]
    }
  },
  "mirror_similar_quadrilateral_property_ratio(ABCD,EFGH)": {
    "1": {
      "premise": "MirrorSimilarBetweenQuadrilateral(ABCD,EFGH)",
      "conclusion": [
        "MirrorSimilarBetweenQuadrilateral(EFGH,ABCD)",
        "Equal(Mul(RatioOfMirrorSimilarQuadrilateral(ABCD,EFGH),RatioOfMirrorSimilarQuadrilateral(EFGH,ABCD)),1)"
      ]
    }
  },
  "mirror_similar_quadrilateral_property_line_ratio(ABCD,EFGH)": {
    "1": {
      "premise": "MirrorSimilarBetweenQuadrilateral(ABCD,EFGH)",
      "conclusion": [
        "Equal(LengthOfLine(AB),Mul(LengthOfLine(EH),RatioOfMirrorSimilarQuadrilateral(ABCD,EFGH)))"
      ]
    }
  },
  "mirror_similar_quadrilateral_property_angle_equal(ABCD,EFGH)": {
    "1": {
      "premise": "MirrorSimilarBetweenQuadrilateral(ABCD,EFGH)",
      "conclusion": [
        "Equal(MeasureOfAngle(DAB),MeasureOfAngle(HEF))"
      ]
    }
  },
  "mirror_similar_quadrilateral_property_perimeter_ratio(ABCD,EFGH)": {
    "1": {
      "premise": "MirrorSimilarBetweenQuadrilateral(ABCD,EFGH)",
      "conclusion": [
        "Equal(PerimeterOfQuadrilateral(ABCD),Mul(PerimeterOfQuadrilateral(EFGH),RatioOfMirrorSimilarQuadrilateral(ABCD,EFGH)))"
      ]
    }
  },
  "mirror_similar_quadrilateral_property_area_square_ratio(ABCD,EFGH)": {
    "1": {
      "premise": "MirrorSimilarBetweenQuadrilateral(ABCD,EFGH)",
      "conclusion": [
        "Equal(AreaOfQuadrilateral(ABCD),Mul(AreaOfQuadrilateral(EFGH),RatioOfMirrorSimilarQuadrilateral(ABCD,EFGH),RatioOfMirrorSimilarQuadrilateral(ABCD,EFGH)))"
      ]
    }
  },
  "parallelogram_judgment_parallel_and_parallel(ABCD)": {
    "1": {
      "premise": "Polygon(ABCD)&ParallelBetweenLine(AD,BC)&ParallelBetweenLine(BA,CD)",
      "conclusion": [
        "Parallelogram(ABCD)"
      ]
    }
  },
  "parallelogram_judgment_parallel_and_equal(ABCD)": {
    "1": {
      "premise": "Polygon(ABCD)&ParallelBetweenLine(BA,CD)&Equal(LengthOfLine(BA),LengthOfLine(CD))",
      "conclusion": [
        "Parallelogram(ABCD)"
      ]
    }
  },
  "parallelogram_judgment_equal_and_equal(ABCD)": {
    "1": {
      "premise": "Polygon(ABCD)&Equal(LengthOfLine(AD),LengthOfLine(BC))&Equal(LengthOfLine(BA),LengthOfLine(CD))",
      "conclusion": [
        "Parallelogram(ABCD)"
      ]
    }
  },
  "parallelogram_judgment_angle_and_angle(ABCD)": {
    "1": {
      "premise": "Polygon(ABCD)&Equal(MeasureOfAngle(DAB),MeasureOfAngle(BCD))&Equal(MeasureOfAngle(ABC),MeasureOfAngle(CDA))",
      "conclusion": [
        "Parallelogram(ABCD)"
      ]
    }
  },
  "parallelogram_judgment_diagonal_bisection(ABCD,O)": {
    "1": {
      "premise": "Polygon(ABCD)&Collinear(AOC)&Collinear(BOD)&IsMidpointOfLine(O,AC)&IsMidpointOfLine(O,BD)",
      "conclusion": [
        "Parallelogram(ABCD)"
      ]
    }
  },
  "parallelogram_property_opposite_line_equal(ABCD)": {
    "1": {
      "premise": "Parallelogram(ABCD)",
      "conclusion": [
        "Equal(LengthOfLine(BA),LengthOfLine(CD))"
      ]
    }
  },
  "parallelogram_property_opposite_angle_equal(ABCD)": {
    "1": {
      "premise": "Parallelogram(ABCD)",
      "conclusion": [
        "Equal(MeasureOfAngle(DAB),MeasureOfAngle(BCD))"
      ]
    }
  },
  "parallelogram_property_diagonal_bisection(ABCD,O)": {
    "1": {
      "premise": "Parallelogram(ABCD)&Collinear(AOC)&Collinear(BOD)",
      "conclusion": [
        "IsMidpointOfLine(O,AC)"
      ]
    }
  },
  "parallelogram_area_formula_common(ABCD)": {
    "1": {
      "premise": "Parallelogram(ABCD)",
      "conclusion": [
        "Equal(AreaOfQuadrilateral(ABCD),Mul(HeightOfQuadrilateral(ABCD),LengthOfLine(BC)))"
      ]
    }
  },
  "parallelogram_area_formula_sine(ABCD)": {
    "1": {
      "premise": "Parallelogram(ABCD)",
      "conclusion": [
        "Equal(AreaOfQuadrilateral(ABCD),Mul(LengthOfLine(AB),LengthOfLine(BC),Sin(MeasureOfAngle(ABC))))"
      ]
    }
  },
  "kite_judgment_equal_and_equal(ABCD)": {
    "1": {
      "premise": "Polygon(ABCD)&Equal(LengthOfLine(AB),LengthOfLine(AD))&Equal(LengthOfLine(CB),LengthOfLine(CD))",
      "conclusion": [
        "Kite(ABCD)"
      ]
    }
  },
  "kite_property_diagonal_perpendicular_bisection(ABCD,O)": {
    "1": {
      "premise": "Kite(ABCD)&Collinear(AOC)&Collinear(BOD)",
      "conclusion": [
        "IsPerpendicularBisectorOfLine(AO,BD)"
      ]
    }
  },
  "kite_property_opposite_angle_equal(ABCD)": {
    "1": {
      "premise": "Kite(ABCD)",
      "conclusion": [
        "Equal(MeasureOfAngle(ABC),MeasureOfAngle(CDA))"
      ]
    }
  },
  "kite_area_formula_diagonal(ABCD)": {
    "1": {
      "premise": "Kite(ABCD)&Line(BD)&Line(AC)",
      "conclusion": [
        "Equal(AreaOfQuadrilateral(ABCD),Mul(LengthOfLine(BD),LengthOfLine(AC),1/2))"
      ]
    }
  },
  "kite_area_formula_sine(ABCD)": {
    "1": {
      "premise": "Kite(ABCD)",
      "conclusion": [
        "Equal(AreaOfQuadrilateral(ABCD),Mul(LengthOfLine(AB),LengthOfLine(BC),Sin(MeasureOfAngle(ABC))))"
      ]
    }
  },
  "rectangle_judgment_right_angle(ABCD)": {
    "1": {
      "premise": "Parallelogram(ABCD)&Equal(MeasureOfAngle(ABC),90)",
      "conclusion": [
        "Rectangle(ABCD)"
      ]
    }
  },
  "rectangle_judgment_diagonal_equal(ABCD)": {
    "1": {
      "premise": "Parallelogram(ABCD)&Line(AC)&Line(BD)&Equal(LengthOfLine(AC),LengthOfLine(BD))",
      "conclusion": [
        "Rectangle(ABCD)"
      ]
    }
  },
  "rectangle_property_diagonal_equal(ABCD)": {
    "1": {
      "premise": "Rectangle(ABCD)&Line(AC)&Line(BD)",
      "conclusion": [
        "Equal(LengthOfLine(AC),LengthOfLine(BD))"
      ]
    }
  },
  "rhombus_judgment_parallelogram_and_kite(ABCD)": {
    "1": {
      "premise": "Parallelogram(ABCD)&Kite(ABCD)",
      "conclusion": [
        "Rhombus(ABCD)"
      ]
    }
  },
  "square_judgment_rhombus_and_rectangle(ABCD)": {
    "1": {
      "premise": "Rhombus(ABCD)&Rectangle(ABCD)",
      "conclusion": [
        "Square(ABCD)"
      ]
    }
  },
  "trapezoid_judgment_parallel(ABCD)": {
    "1": {
      "premise": "Polygon(ABCD)&ParallelBetweenLine(AD,BC)&~ParallelBetweenLine(BA,CD)",
      "conclusion": [
        "Trapezoid(ABCD)"
      ]
    }
  },
  "trapezoid_area_formula(ABCD)": {
    "1": {
      "premise": "Trapezoid(ABCD)",
      "conclusion": [
        "Equal(AreaOfQuadrilateral(ABCD),Mul(Add(LengthOfLine(AD),LengthOfLine(BC)),HeightOfQuadrilateral(ABCD),1/2))"
      ]
    }
  },
  "right_trapezoid_judgment_right_angle(ABCD)": {
    "1": {
      "premise": "Trapezoid(ABCD)&Equal(MeasureOfAngle(ABC),90)",
      "conclusion": [
        "RightTrapezoid(ABCD)"
      ]
    }
  },
  "right_trapezoid_area_formular(ABCD)": {
    "1": {
      "premise": "RightTrapezoid(ABCD)",
      "conclusion": [
        "Equal(AreaOfQuadrilateral(ABCD),Mul(Add(LengthOfLine(AD),LengthOfLine(BC)),LengthOfLine(AB),1/2))"
      ]
    }
  },
  "isosceles_trapezoid_judgment_line_equal(ABCD)": {
    "1": {
      "premise": "Trapezoid(ABCD)&Equal(LengthOfLine(AB),LengthOfLine(CD))",
      "conclusion": [
        "IsoscelesTrapezoid(ABCD)"
      ]
    }
  },
  "isosceles_trapezoid_judgment_angle_equal(ABCD)": {
    "1": {
      "premise": "Trapezoid(ABCD)&Equal(MeasureOfAngle(ABC),MeasureOfAngle(BCD))",
      "conclusion": [
        "IsoscelesTrapezoid(ABCD)"
      ]
    }
  },
  "isosceles_trapezoid_judgment_diagonal_equal(ABCD)": {
    "1": {
      "premise": "Trapezoid(ABCD)&Line(AC)&Line(BD)&Equal(LengthOfLine(AC),LengthOfLine(BD))",
      "conclusion": [
        "IsoscelesTrapezoid(ABCD)"
      ]
    }
  },
  "isosceles_trapezoid_property_angle_equal(ABCD)": {
    "1": {
      "premise": "IsoscelesTrapezoid(ABCD)",
      "conclusion": [
        "Equal(MeasureOfAngle(ABC),MeasureOfAngle(BCD))"
      ]
    }
  },
  "isosceles_trapezoid_property_diagonal_equal(ABCD)": {
    "1": {
      "premise": "IsoscelesTrapezoid(ABCD)",
      "conclusion": [
        "Equal(LengthOfLine(AC),LengthOfLine(BD))"
      ]
    }
  },
  "round_arc(OAB,OBA)": {
    "1": {
      "premise": "Arc(OAB)&Arc(OBA)",
      "conclusion": [
        "Equal(Add(MeasureOfArc(OAB),MeasureOfArc(OBA)),360)"
      ]
    }
  },
  "arc_addition_length(OAB,OBC)": {
    "1": {
      "premise": "Arc(OAB)&Arc(OBC)&Arc(OAC)",
      "conclusion": [
        "Equal(LengthOfArc(OAC),Add(LengthOfArc(OAB),LengthOfArc(OBC)))"
      ]
    }
  },
  "arc_addition_measure(OAB,OBC)": {
    "1": {
      "premise": "Arc(OAB)&Arc(OBC)&Arc(OAC)",
      "conclusion": [
        "Equal(MeasureOfArc(OAC),Add(MeasureOfArc(OAB),MeasureOfArc(OBC)))"
      ]
    }
  },
  "arc_property_center_angle(OAB,P)": {
    "1": {
      "premise": "Arc(OAB)&Angle(BPA)&IsCentreOfCircle(P,O)",
      "conclusion": [
        "Equal(MeasureOfArc(OAB),MeasureOfAngle(BPA))"
      ]
    }
  },
  "arc_property_circumference_angle_external(OAB,C)": {
    "1": {
      "premise": "Cocircular(O,ABC)&Angle(BCA)",
      "conclusion": [
        "Equal(MeasureOfAngle(BCA),Mul(MeasureOfArc(OAB),1/2))"
      ]
    }
  },
  "arc_property_circumference_angle_internal(OAB,D)": {
    "1": {
      "premise": "Cocircular(O,ADB)&Angle(ADB)",
      "conclusion": [
        "Equal(MeasureOfAngle(ADB),Sub(180,Mul(MeasureOfArc(OAB),1/2)))"
      ]
    }
  },
  "arc_length_formula(OAB)": {
    "1": {
      "premise": "Arc(OAB)",
      "conclusion": [
        "Equal(LengthOfArc(OAB),Mul(MeasureOfArc(OAB),1/180*pi,RadiusOfCircle(O)))"
      ]
    }
  },
  "congruent_arc_judgment_length_equal(XAB,YCD)": {
    "1": {
      "premise": "Arc(XAB)&Arc(YCD)&Cocircular(X,CD)&Equal(LengthOfArc(XAB),LengthOfArc(YCD))",
      "conclusion": [
        "CongruentBetweenArc(XAB,YCD)"
      ]
    }
  },
  "congruent_arc_judgment_measure_equal(XAB,YCD)": {
    "1": {
      "premise": "Arc(XAB)&Arc(YCD)&Cocircular(X,CD)&Equal(MeasureOfArc(XAB),MeasureOfArc(YCD))",
      "conclusion": [
        "CongruentBetweenArc(XAB,YCD)"
      ]
    }
  },
  "congruent_arc_judgment_chord_equal(XAB,YCD)": {
    "1": {
      "premise": "Arc(XAB)&Arc(YCD)&Cocircular(X,CD)&Line(AB)&Line(CD)&Equal(LengthOfLine(AB),LengthOfLine(CD))",
      "conclusion": [
        "CongruentBetweenArc(XAB,YCD)"
      ]
    }
  },
  "congruent_arc_property_length_equal(XAB,YCD)": {
    "1": {
      "premise": "CongruentBetweenArc(XAB,YCD)",
      "conclusion": [
        "Equal(LengthOfArc(XAB),LengthOfArc(YCD))"
      ]
    }
  },
  "congruent_arc_property_measure_equal(XAB,YCD)": {
    "1": {
      "premise": "CongruentBetweenArc(XAB,YCD)",
      "conclusion": [
        "Equal(MeasureOfArc(XAB),MeasureOfArc(YCD))"
      ]
    }
  },
  "congruent_arc_property_chord_equal(XAB,YCD)": {
    "1": {
      "premise": "CongruentBetweenArc(XAB,YCD)&Line(AB)&Line(CD)",
      "conclusion": [
        "Equal(LengthOfLine(AB),LengthOfLine(CD))"
      ]
    }
  },
  "similar_arc_judgment_cocircular(XAB,YCD)": {
    "1": {
      "premise": "Arc(XAB)&Arc(YCD)&Cocircular(X,CD)",
      "conclusion": [
        "SimilarBetweenArc(XAB,YCD)"
      ]
    }
  },
  "similar_arc_property_ratio(XAB,YCD)": {
    "1": {
      "premise": "SimilarBetweenArc(XAB,YCD)&SimilarBetweenArc(YCD,XAB)",
      "conclusion": [
        "Equal(Mul(RatioOfSimilarArc(XAB,YCD),RatioOfSimilarArc(YCD,XAB)),1)"
      ]
    }
  },
  "similar_arc_property_length_ratio(XAB,YCD)": {
    "1": {
      "premise": "SimilarBetweenArc(XAB,YCD)",
      "conclusion": [
        "Equal(LengthOfArc(XAB),Mul(LengthOfArc(YCD),RatioOfSimilarArc(YCD,XAB)))"
      ]
    }
  },
  "similar_arc_property_measure_ratio(XAB,YCD)": {
    "1": {
      "premise": "SimilarBetweenArc(XAB,YCD)",
      "conclusion": [
        "Equal(MeasureOfArc(XAB),Mul(MeasureOfArc(YCD),RatioOfSimilarArc(YCD,XAB)))"
      ]
    }
  },
  "similar_arc_property_chord_ratio(XAB,YCD)": {
    "1": {
      "premise": "SimilarBetweenArc(XAB,YCD)&Line(AB)&Line(CD)",
      "conclusion": [
        "Equal(LengthOfLine(AB),Mul(LengthOfLine(CD),RatioOfSimilarArc(YCD,XAB)))"
      ]
    }
  },
  "circle_property_length_of_radius_and_diameter(O)": {
    "1": {
      "premise": "Circle(O)",
      "conclusion": [
        "Equal(DiameterOfCircle(O),Mul(RadiusOfCircle(O),2))"
      ]
    }
  },
  "circle_property_circular_power_chord_and_chord(AEB,CED,O)": {
    "1": {
      "premise": "Cocircular(O,AB)&Cocircular(O,CD)&Collinear(AEB)&Collinear(CED)",
      "conclusion": [
        "Equal(Mul(LengthOfLine(EC),LengthOfLine(ED)),Mul(LengthOfLine(EA),LengthOfLine(EB)))"
      ]
    }
  },
  "circle_property_circular_power_tangent_and_segment_line(PA,PCD,O)": {
    "1": {
      "premise": "IsTangentOfCircle(PA,O)&Cocircular(O,CD)&Collinear(PCD)",
      "conclusion": [
        "Equal(Mul(LengthOfLine(PA),LengthOfLine(PA)),Mul(LengthOfLine(PC),LengthOfLine(PD)))"
      ]
    }
  },
  "circle_property_circular_power_segment_and_segment_line(PAB,PCD,O)": {
    "1": {
      "premise": "Cocircular(O,AB)&Cocircular(O,CD)&Collinear(PAB)&Collinear(PCD)",
      "conclusion": [
        "Equal(Mul(LengthOfLine(PA),LengthOfLine(PB)),Mul(LengthOfLine(PC),LengthOfLine(PD)))"
      ]
    }
  },
  "circle_property_circular_power_tangent_and_segment_angle(PA,PCD,O)": {
    "1": {
      "premise": "Cocircular(O,ACD)&Collinear(PCD)",
      "conclusion": [
        "Equal(Sub(MeasureOfArc(ODA),MeasureOfArc(OAC)),Mul(MeasureOfAngle(APC),2))"
      ]
    },
    "2": {
      "premise": "Cocircular(O,CAD)&Collinear(PCD)",
      "conclusion": [
        "Equal(Sub(MeasureOfArc(OAD),MeasureOfArc(OCA)),Mul(MeasureOfAngle(CPA),2))"
      ]
    }
  },
  "circle_property_circular_power_segment_and_segment_angle(PAB,PCD,O)": {
    "1": {
      "premise": "Cocircular(O,ACDB)&Collinear(PAB)&Collinear(PCD)",
      "conclusion": [
        "Equal(Sub(MeasureOfArc(ODB),MeasureOfArc(OAC)),Mul(MeasureOfAngle(APC),2))"
      ]
    },
    "2": {
      "premise": "Cocircular(O,CABD)&Collinear(PAB)&Collinear(PCD)",
      "conclusion": [
        "Equal(Sub(MeasureOfArc(OBD),MeasureOfArc(OCA)),Mul(MeasureOfAngle(CPA),2))"
      ]
    }
  },
  "circle_property_chord_perpendicular_bisect_chord(O,PM,AB)": {
    "1": {
      "premise": "Cocircular(O,AB)&Collinear(AMB)&IsCentreOfCircle(P,O)&Equal(MeasureOfAngle(AMP),90)",
      "conclusion": [
        "IsPerpendicularBisectorOfLine(PM,AB)"
      ]
    },
    "2": {
      "premise": "Cocircular(O,AB)&Collinear(AMB)&IsCentreOfCircle(P,O)&Equal(LengthOfLine(AM),LengthOfLine(MB))",
      "conclusion": [
        "IsPerpendicularBisectorOfLine(PM,AB)"
      ]
    }
  },
  "circle_property_chord_perpendicular_bisect_arc(OAB,PMD)": {
    "1": {
      "premise": "Arc(OAB)&Cocircular(O,ADB)&Collinear(AMB)&Collinear(PMD)&IsCentreOfCircle(P,O)&Equal(MeasureOfAngle(AMO),90)",
      "conclusion": [
        "Equal(LengthOfArc(OAD),LengthOfArc(ODB))"
      ]
    },
    "2": {
      "premise": "Arc(OAB)&Cocircular(O,ADB)&Collinear(AMB)&Collinear(PMD)&IsCentreOfCircle(P,O)&Equal(LengthOfLine(AM),LengthOfLine(MB))",
      "conclusion": [
        "Equal(LengthOfArc(OAD),LengthOfArc(ODB))"
      ]
    }
  },
  "circle_property_angle_of_osculation(OAB,P)": {
    "1": {
      "premise": "Arc(OAB)&Angle(BAP)&IsTangentOfCircle(PA,O)",
      "conclusion": [
        "Equal(MeasureOfAngle(BAP),Mul(MeasureOfArc(OAB),1/2))"
      ]
    },
    "2": {
      "premise": "Arc(OAB)&Angle(PBA)&IsTangentOfCircle(PB,O)",
      "conclusion": [
        "Equal(MeasureOfAngle(PBA),Mul(MeasureOfArc(OAB),1/2))"
      ]
    }
  },
  "circle_perimeter_formula(O)": {
    "1": {
      "premise": "Circle(O)",
      "conclusion": [
        "Equal(PerimeterOfCircle(O),Mul(2*pi,RadiusOfCircle(O)))"
      ]
    }
  },
  "circle_area_formula(O)": {
    "1": {
      "premise": "Circle(O)",
      "conclusion": [
        "Equal(AreaOfCircle(O),Mul(pi,RadiusOfCircle(O),RadiusOfCircle(O)))"
      ]
    }
  },
  "radius_of_circle_property_length_equal(PA,O)": {
    "1": {
      "premise": "Cocircular(O,A)&Line(PA)&IsCentreOfCircle(P,O)",
      "conclusion": [
        "Equal(LengthOfLine(PA),RadiusOfCircle(O))"
      ]
    }
  },
  "diameter_of_circle_judgment_pass_centre(APB,O)": {
    "1": {
      "premise": "Cocircular(O,AB)&Collinear(APB)&IsCentreOfCircle(P,O)",
      "conclusion": [
        "IsDiameterOfCircle(AB,O)"
      ]
    }
  },
  "diameter_of_circle_judgment_length_equal(AB,O)": {
    "1": {
      "premise": "Cocircular(O,AB)&Equal(DiameterOfCircle(O),LengthOfLine(AB))",
      "conclusion": [
        "IsDiameterOfCircle(AB,O)"
      ]
    }
  },
  "diameter_of_circle_judgment_right_angle(BCA,O)": {
    "1": {
      "premise": "Cocircular(O,BCA)&Equal(MeasureOfAngle(BCA),90)",
      "conclusion": [
        "IsDiameterOfCircle(AB,O)"
      ]
    }
  },
  "diameter_of_circle_property_length_equal(AB,O)": {
    "1": {
      "premise": "IsDiameterOfCircle(AB,O)",
      "conclusion": [
        "Equal(LengthOfLine(AB),DiameterOfCircle(O))"
      ]
    }
  },
  "diameter_of_circle_property_right_angle(BCA,O)": {
    "1": {
      "premise": "IsDiameterOfCircle(AB,O)&Cocircular(O,BCA)&Angle(BCA)",
      "conclusion": [
        "PerpendicularBetweenLine(BC,AC)"
      ]
    }
  },
  "tangent_of_circle_judgment_perpendicular(PA,O,Q)": {
    "1": {
      "premise": "Cocircular(O,A)&IsCentreOfCircle(Q,O)&Angle(QAP)&Equal(MeasureOfAngle(QAP),90)",
      "conclusion": [
        "IsTangentOfCircle(PA,O)"
      ]
    },
    "2": {
      "premise": "Cocircular(O,A)&IsCentreOfCircle(Q,O)&Angle(PAQ)&Equal(MeasureOfAngle(PAQ),90)",
      "conclusion": [
        "IsTangentOfCircle(PA,O)"
      ]
    }
  },
  "tangent_of_circle_property_perpendicular(PA,O,Q)": {
    "1": {
      "premise": "IsTangentOfCircle(PA,O)&Angle(QAP)&IsCentreOfCircle(Q,O)",
      "conclusion": [
        "PerpendicularBetweenLine(QA,PA)"
      ]
    },
    "2": {
      "premise": "IsTangentOfCircle(PA,O)&Angle(PAQ)&IsCentreOfCircle(Q,O)",
      "conclusion": [
        "PerpendicularBetweenLine(PA,QA)"
      ]
    }
  },
  "tangent_of_circle_property_length_equal(PA,PB,O)": {
    "1": {
      "premise": "IsTangentOfCircle(PA,O)&IsTangentOfCircle(PB,O)",
      "conclusion": [
        "Equal(LengthOfLine(PA),LengthOfLine(PB))"
      ]
    }
  },
  "sector_perimeter_formula(OAB)": {
    "1": {
      "premise": "Arc(OAB)",
      "conclusion": [
        "Equal(PerimeterOfSector(OAB),Add(RadiusOfCircle(O),RadiusOfCircle(O),LengthOfArc(OAB)))"
      ]
    }
  },
  "sector_area_formula(OAB)": {
    "1": {
      "premise": "Arc(OAB)",
      "conclusion": [
        "Equal(AreaOfSector(OAB),Mul(MeasureOfArc(OAB),1/360*pi,RadiusOfCircle(O),RadiusOfCircle(O)))"
      ]
    }
  },
  "perpendicular_bisector_judgment_per_and_bisect(AD,BC)": {
    "1": {
      "premise": "IsBisectorOfAngle(AD,CAB)&Collinear(BDC)&Equal(LengthOfLine(BD),LengthOfLine(DC))",
      "conclusion": [
        "IsPerpendicularBisectorOfLine(AD,BC)"
      ]
    }
  }
}